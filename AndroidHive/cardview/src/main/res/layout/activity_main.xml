<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
    android:id="@+id/main_content"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/white"
    android:fitsSystemWindows="true">

    <!--
        AppBarLayout继承自LinearLayout，所以其布局方向为垂直方向（子View默认垂直排列），
        它可以让你定制当某个可滚动View（默认提供了NestedScrollView)的滚动手势发生变化时，其内部的子View实现何种动作。

        重点： 通过设置子View的 layout_scrollFlags参数，来控制AppBarLayout中子View的行为
            scroll: 该子View会跟随滚动事件一起发生滚动
            exitUntilCollapsed：在ScrollView往上滑动时，首先是View把滑动事件“夺走”，由View去执行滑动，直到滑动最小高度后，
            把这个滑动事件“还”回去，让ScrollView内部去上滑。

        在我们的这个例子中，大部分View的layout_scrollFlags都设置为scroll，如果没有设置的话，
        当可滚动的View进行滚动时，这些没设置为scroll的View位置会保持不变
    -->
    <android.support.design.widget.AppBarLayout
        android:id="@+id/appbar"
        android:layout_width="match_parent"
        android:layout_height="@dimen/detail_backdrop_height"
        android:fitsSystemWindows="true"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

        <!--
            CollapsingToolbarLayout 用于封装ToolBar, 提供了一个可折叠的Toolbar。它的几个主要功能：
                (1)折叠Title（Collapsing title）：当布局内容全部显示出来时，title是最大的，但是随着View逐步移出屏幕顶部，title变得越来越小。你可以通过调用setTitle函数来设置title。
                (2)内容纱布（Content scrim）：根据滚动的位置是否到达一个阀值，来决定是否对View“盖上纱布”。可以通过setContentScrim(Drawable)来设置纱布的图片.
                (3)状态栏纱布（Status bar scrim)：根据滚动位置是否到达一个阀值决定是否对状态栏“盖上纱布”，你可以通过setStatusBarScrim(Drawable)来设置纱布图片，但是只能在LOLLIPOP设备上面有作用。
                (4)视差滚动子View(Parallax scrolling children):子View可以选择在当前的布局当时是否以“视差”的方式来跟随滚动。（PS:其实就是让这个View的滚动的速度比其他正常滚动的View速度稍微慢一点）。将布局参数app:layout_collapseMode设为parallax
                (5)将子View位置固定(Pinned position children)：子View可以选择是否在全局空间上固定位置，这对于Toolbar来说非常有用，因为当布局在移动时，可以将Toolbar固定位置而不受移动的影响。 将app:layout_collapseMode设为pin。

            app:contentScrim CollapsingToolbarLayout这个属性是设置折叠后Toolbar的颜色；
            app:contentScrim - 设置当完全CollapsingToolbarLayout折叠(收缩)后的背景颜色。
            expandedTitleMarginStart - 设置扩张时候(还没有收缩时)title向左填充的距离。
            app:layout_scrollFlags="scroll|exitUntilCollapsed" 用以配合 AppBarLayout使用
            app:collapsedTitleTextAppearance：折叠状态标题文字的样式
            app:expandedTitleTextAppearance：展开状态标题文字的样式

            CollapsingToolbarLayout的 子View：
            layout_collapseMode (折叠模式)：
                pin -  设置为这个模式时，当CollapsingToolbarLayout完全收缩后，还可以保留在屏幕上。
                parallax - 设置为这个模式时，在内容滚动时，CollapsingToolbarLayout中的View（比如ImageView)也可以同时滚动，实现视差滚动效果，
                通常和layout_collapseParallaxMultiplier(设置视差因子)搭配使用。

            layout_collapseParallaxMultiplier(视差因子) - 设置视差滚动因子，值为：0~1。

            使用CollapsingToolbarLayout时必须把title设置到CollapsingToolbarLayout上，设置到Toolbar上不会显示。即：
            mCollapsingToolbarLayout.setTitle(" "); 还可设置在收缩和扩张时变title的字体颜色。
        -->
        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fitsSystemWindows="true"
            app:contentScrim="@color/colorPrimary"
            app:expandedTitleMarginEnd="64dp"
            app:expandedTitleMarginStart="48dp"
            app:expandedTitleTextAppearance="@android:color/transparent"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">
<!--            app:expandedTitleTextAppearance="@android:color/transparent"
-->

            <RelativeLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <!-- 图片填充整个CollapsingToolbarLayout -->
                <ImageView
                    android:id="@+id/backdrop"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:fitsSystemWindows="true"
                    android:scaleType="centerCrop"
                    app:layout_collapseMode="parallax"/>

                <LinearLayout
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_centerInParent="true"
                    android:gravity="center_horizontal"
                    android:orientation="vertical">

                    <TextView
                        android:id="@+id/love_music"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="@string/backdrop_title"
                        android:textColor="@android:color/white"
                        android:textSize="@dimen/backdrop_title"/>

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="@string/backdrop_subtitle"
                        android:textColor="@android:color/white"
                        android:textSize="@dimen/backdrop_subtitle"/>
                </LinearLayout>
            </RelativeLayout>

            <!-- app:layout_collapseMode="pin" 保留Toolbar不被收缩  -->
            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"
                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"/>

        </android.support.design.widget.CollapsingToolbarLayout>
    </android.support.design.widget.AppBarLayout>


    <!-- AppBarLayout 和 include中content_main布局 之间的协调（关联）由 CoordinatorLayout负责 -->
    <!-- AppBarLayout 负责处理其子View 和 include中的 RecyclerView（包含在content_main里面） 之间的协调 -->
    <!--
        content_main布局中的根布局设置了属性：
        注意到有个属性：app:layout_behavior="@string/appbar_scrolling_view_behavior",
        它就是指定Behavior的，appbar_scrolling_view_behavior对应的类的名称是：
        android.support.design.widget.AppBarLayout$ScrollingViewBehavior感兴趣的可以去分析源码。
    -->
    <include layout="@layout/content_main"/>
</android.support.design.widget.CoordinatorLayout>
